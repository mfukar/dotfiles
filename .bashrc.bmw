# Depends on the abbreviations file being in ~/Documents/,
# which is fine for me:
bmwspeak() {
    QUOTEFILE="${HOME}/Documents/abbrevs-utf8.csv"

    while getopts ":id" opt; do
        case $opt in
            i)
                CASE_INSENSITIVE='-i'
                ;;
            \?)
                return 1
                ;;
        esac
    done

    # Query terms:
    if [ "$#" -ne 0 ]; then
        set -f
        for term in $*; do
            defs=$(\grep ${CASE_INSENSITIVE} "^${term}" "${QUOTEFILE}")
            SIFS=$IFS; IFS=$'\n'
            for def in $defs; do
                echo -e "BMW abbreviation of the day:\n ${def}" | sed -e 's/;/ - /' | cowsay | lolcat
            done
            IFS=$SIFS
        done
        set +f
        return
    fi

    # Present a random term:
    n=$(wc -l "${QUOTEFILE}" | cut -d' ' -f4)
    c=$(($RANDOM%$n))
    echo -e "BMW abbreviation of the day:\n" $(sed "${c}q;d" "${QUOTEFILE}" | sed -e 's/;/ - /') | cowsay | lolcat
}

sync-date() {
    while [ true ]; do
        ssh $1 "date -s \"@$( date +%s )\"" && echo "Date set.";
        sleep 100;
    done
}

if [ $__os = "Darwin" ]; then

view-boot() {
    if [ "$#" -ne 1 ]; then
        MGU="mgu-lucia"
    else
        MGU=$1
    fi

    ssh $MGU "systemd-analyze plot > /tmp/boot-plot-${MGU}.svg" && scp $MGU:/tmp/boot-plot-$MGU.svg /tmp && open /tmp/boot-plot-$MGU.svg
}

view-blame() {
    if [ "$#" -ne 1 ]; then
        MGU="mgu-lucia"
    else
        MGU=$1
    fi

    ssh $MGU "systemd-analyze blame"
}

view-deps() {
    if [ "$#" -lt 1 ]; then
        echo "Provide a unit."
        return -1
    fi

    if [ "$#" -lt 2 ]; then
        MGU="mgu-lucia"
        UNIT=$1
    else
        MGU=$1
        shift
        UNIT="$@"
    fi

    if [ "$#" -gt 2 ]; then
        ssh $MGU "systemd-analyze dot > /tmp/unit-deps.dot ${UNIT}" && scp $MGU:/tmp/unit-deps.dot /tmp && cat /tmp/unit-deps.dot | dot -Tsvg > /tmp/unit-deps.svg && open /tmp/unit-deps.svg
    else
        ssh $MGU "systemd-analyze dot > /tmp/${UNIT}-deps.dot ${UNIT}" && scp $MGU:/tmp/$UNIT-deps.dot /tmp && cat /tmp/$UNIT-deps.dot | dot -Tsvg > /tmp/$UNIT-deps.svg && open /tmp/$UNIT-deps.svg
    fi
}

fi

BUILD_BASE_DIR='/media/michaelf/build/base'
alias go-build="pushd ${BUILD_BASE_DIR}"
alias clean-build=''
alias clear-cache=''

alias bb-shell="cd ${BUILD_BASE_DIR} && ./bci-build-scripts/build.sh --bitbake-shell --silent"

